name: Docs

# Generate the documentation on all merges to main, all pull requests, or by
# manual workflow dispatch. The build job can be used as a CI check that the
# docs still build successfully. The deploy job which moves the generated
# html to the gh-pages branch and triggers a GitHub pages deployment
# only runs when a tag is pushed or when the workflow is manually dispatched
# from the main branch.
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  merge_group:
  workflow_dispatch:

jobs:
  build_sphinx_docs:
    name: Build Sphinx Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v4
        with:
          path: |
            ~/.movement/*
          key: cached-test-data-${{ runner.os }}
          restore-keys: cached-test-data
      - uses: neuroinformatics-unit/actions/build_sphinx_docs@main
        with:
          python-version: 3.12
          fetch-tags: true
          use-make: true

  deploy_sphinx_docs:
    name: Deploy Sphinx Docs
    needs: build_sphinx_docs
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clear previous build if present
      shell: bash
      run: rm -rf ./docs/build

    - name: Download the content for deployment
      uses: actions/download-artifact@v4
      with:
        name: docs-build
        path: ./docs/build

    - name: Checkout the gh-pages branch in a separate folder
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        # Checkout to this folder instead of the current one
        path: deploy
        # Download the entire history
        fetch-depth: 0

    - name: Push the built HTML to gh-pages
      shell: bash 
      run: |
        # Detect if this is a release or from the main branch
        echo "Event name: ${{ github.event_name }}"
        echo "Ref type: ${{ github.ref_type }}"
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
            # Get the tag name without the "refs/tags/" part
            version="${GITHUB_REF#refs/*/}"
        else
            version=dev
        fi

        echo "Deploying version: $version"
        # Make the new commit message. Needs to happen before cd into deploy
        # to get the right commit hash.
        message="Deploy $version from $(git rev-parse --short HEAD)"
        cd deploy
        # Need to have this file so that Github doesn't try to run Jekyll
        touch .nojekyll
        # Delete all the files and replace with our new  set
        echo -e "\nRemoving old files from previous builds of ${version}:"
        rm -rvf ${version}
        echo -e "\nCopying HTML files to ${version}:"

        BUILD_DIR="../docs/build/html"
        cp -Rvf $BUILD_DIR ${version}/

        SWITCHER_URL="https://animeshsasan.github.io/sphinx-deployment-test/latest/_static/switcher.json"
        echo -e "\nUpdating switcher.json at ${SWITCHER_URL} for version ${version}."
        if curl --output /dev/null --silent --head --fail "$SWITCHER_URL"; then
          if [[ "${version}" != "dev" ]]; then
            # File exists, fetch and update
            SWITCHER_CONTENT=$(curl "$SWITCHER_URL")
            BASE_URL="$(jq -r '.[1].url|split("/")[0:-1]|join("/")' <<< $SWITCHER_CONTENT)"
            NEW_URL="${BASE_URL}/latest"

            # Extract the current dev entry
            DEV_ENTRY=$(jq '.[0]' <<< "${SWITCHER_CONTENT}")

            CURRENT_LATEST_VERSION=$(echo $(jq '.[1].version' <<< "${SWITCHER_CONTENT}") | tr -d '"')
            UPDATED_CURRENT_LATEST_ENTRY=$(jq --arg url "${BASE_URL}/${CURRENT_LATEST_VERSION}" '.[0] | .url = $url | del(.name)' <<< "$SWITCHER_CONTENT")
            
            # Create the new version entry with the "latest" tag
            NEW_ENTRY=$(jq -n --arg version "${version}" --arg url "$NEW_URL" --arg name "$version (latest)" \
              '{name: $name, version: $version, url: $url}')

            # Combine the entries in the desired order
            UPDATED_SWITCHER_CONTENT=$(jq --argjson dev_entry "$DEV_ENTRY" --argjson new_entry "$NEW_ENTRY" --argjson updated_current_latest "$UPDATED_CURRENT_LATEST_ENTRY" '[$dev_entry, $new_entry, $updated_current_latest] + .[2:]' <<< "$SWITCHER_CONTENT")
          fi
        else
          # File does not exist, initialize with current version/dev as latest
          # TODO: Clean this up post first release
          BASE_URL="https://animeshsasan.github.io/sphinx-deployment-test"
          NEW_URL="${BASE_URL}/latest"

          if [[ "${version}" != "dev" ]]; then
            # Create the "latest" entry
            LATEST_ENTRY=$(jq -n --arg version "${version}" --arg url "$NEW_URL" --arg name "$version (latest)" \
              '{name: $name, version: $version, url: $url}')

            # Create the "dev" entry
            DEV_ENTRY=$(jq -n --arg version "dev" --arg url "${BASE_URL}/dev" --arg name "Development" \
              '{name: $name, version: $version, url: $url}')
            
            # Combine both
            UPDATED_SWITCHER_CONTENT=$(jq -n --argjson latest "$LATEST_ENTRY" --argjson dev "$DEV_ENTRY" \
              '[$dev, $latest]')
          else
            # Create the "dev" entry
            DEV_ENTRY=$(jq -n --arg version "dev" --arg url "${BASE_URL}/dev" --arg name "Development" \
              '{name: $name, version: $version, url: $url}')
            
            # Combine both
            UPDATED_SWITCHER_CONTENT=$(jq -n --argjson dev "$DEV_ENTRY" \
              '[$dev]')
          fi
        fi
          
          SWITCHER_FILE="${version}/_static/switcher.json"
          echo "$UPDATED_SWITCHER_CONTENT" > "$SWITCHER_FILE"
          echo "${version}/_static/switcher.json has been updated successfully."
        fi
        
        # If this is a new release, update the link from /latest to it
        if [[ "${version}" != "dev" ]]; then
            echo -e "\nSetup link from ${version} to 'latest'."
            rm -f latest
            ln -sf ${version} latest
        fi
        
        # Stage the commit
        git add -A .
        echo -e "\nChanges to be applied:"
        git status
        # Configure git to be the GitHub Actions account
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config user.name "github-actions[bot]"
        echo -e "\nMaking a new commit:"
        git commit -m "$message"
        # Make the push quiet just in case there is anything that could leak
        # sensitive information.
        echo -e "\nPushing changes to gh-pages."
        git push -fq origin gh-pages 2>&1 >/dev/null
        echo -e "\nFinished uploading generated files."

